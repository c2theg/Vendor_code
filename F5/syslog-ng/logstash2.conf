# version 1.3.6 - 3-21-2018
# sudo -u logstash /usr/share/logstash/bin/logstash --path.settings=/etc/logstash -f /home/ubuntu/logstash/f5_logging.conf

input {
	udp {
    		port => 1513
    		type =>"bigiplogs"
    	}
	udp {
    		port => 1514
    		type =>"httplogs"
    	}
	udp {
    		port => 1515
    		type =>"ddoslogs"
    	}
	udp {
    		port => 1516
    		type =>"dnslogs"
    	}
#        udp {
#                port => 25826
#                buffer_size => 1452
#                codec => collectd {}
#                type => "collectd"
#        }
	#------- files ----------
#        file {
#                path => "/var/log/logstash/asm/*.log"
#                start_position => beginning
#                type =>"asmlogs"
#        }
}


filter {
    if [type] == "bigiplogs" {
    	grok {
	       tag_on_failure => ["bigiplogs_grok_parse-failure"]
	       tag_on_timeout => ["biglogs_grok_timeout"]
	       timeout_millis => [15000]	
        	match => { "message" => 
          		"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_severity} %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}" 
        	}
      	}
      	date {
        	match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
      	}
    }

    if [type] == "httplogs" {
      	grok {
	       tag_on_failure => ["httplogs_grok_parse-failure"]
	       tag_on_timeout => ["httplogs_grok_timeout"]
	       timeout_millis => [15000]	
        	match => { "message" =>
          		"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{IP:client_ip} %{NUMBER:client_port} %{IP:vitual_ip} %{NUMBER:virtual_port} %{DATA:http_version} %{IP:server_ip} %{NUMBER:server_port} %{NUMBER:http_status} %{NUMBER:response_time} %{NUMBER:bytes_received} %{URIPATH:uri_path} %{QUOTEDSTRING:agent} %{QUOTEDSTRING:referrer}" 
        	}
      	}
      	date {
        	match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
      	}
    }

    if [type] == "ddoslogs" {
    	grok {
	       tag_on_failure => ["ddoslogs_grok_parse-failure"]
	       tag_on_timeout => ["ddoslogs_grok_timeout"]
	       timeout_millis => [15000]	
               match => { "message" =>
          		"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} action=\"%{WORD:action}\",hostname=\"%{DATA:f5_hostname}\",bigip_mgmt_ip=\"%{DATA:mgmt_ip}\",context_name=\"%{DATA:context}\",date_time=\"%{DATA:attack_time}\",dest_ip=\"%{DATA:dest_ip}\",dest_port=\"%{DATA:dest_port}\",device_product=\"Advanced Module\",device_vendor=\"F5\",device_version=\"(.*?)\",dos_attack_event=\"%{DATA:dos_attack_event}\",dos_attack_id=\"%{NUMBER:dos_attack_id}\",dos_attack_name=\"%{DATA:dos_attack_name}\",dos_packets_dropped=\"%{INT:packets_dropped}\",dos_packets_received=\"%{INT:packets_received}\",errdefs_msgno=\"(.*?)\",errdefs_msg_name=\"(.*?)\",flow_id=\"(.*?)\",severity=\"%{INT:severity}\",partition_name=\"%{DATA:partition_name}\",route_domain=\"%{DATA:route_domain}\",source_ip=\"%{DATA:source_ip}\",source_port=\"%{DATA:source_port}\",vlan=\"%{DATA:vlan}\"" 
               }
      	}
      	date {
        	match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
      	}
    }
    
    if [type] == "dnslogs" {
    	#--- For DNS Queries
    	if [message] =~ "qid" {
		grok {
		       tag_on_failure => ["dnslogs_grok_query-parse-failure"]
		       tag_on_timeout => ["dnslogs_grok_timeout"]
		       timeout_millis => [15000]
		       patterns_dir => "/etc/logstash/patterns"
		       match => [ "message", "\A<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} (slot1\/)?%{HOSTNAMEUND:syslog_hostname} %{LOGLEVEL:syslog_severity} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}\Z"]
		       #match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:query_id} %{NUMBER:qid} %{WORD:to} %{IPV4:Subscriber}\#%{NUMBER:port}: \[%{DATA:DNS_response} %{DATA:Junk}\] %{DATA:Response} %{DATA:Query} %{NUMBER:TTL} %{WORD:Class} %{WORD:QueryType} %{IPV4:DNSResolution}"}
		} 
    	} else {
	#--- For DNS Responses
		grok {
		       tag_on_failure => ["dnslogs_grok_response-parse-failure"]
		       tag_on_timeout => ["dnslogs_grok_timeout"]
		       timeout_millis => [15000]
		       patterns_dir => "/etc/logstash/patterns"
		       match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAMEUND:syslog_hostname}%{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}%{TIMESTAMP_ISO8601:system_timestamp} %{HOSTNAMEUND:system_hostname}%{GREEDYDATA:syslog_message}"]
		       #match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:query_id} %{NUMBER:qid} %{WORD:to} %{IPV4:Subscriber}\#%{NUMBER:port}: \[%{DATA:DNS_response} %{DATA:Junk}\] %{DATA:Response} %{DATA:Query} %{NUMBER:TTL} %{WORD:Class} %{WORD:QueryType} %{IPV4:DNSResolution}"}
		}
	}
	
  
    }
    
#--- end of input ---    
}

output {
	if "_grok_" in [tags] {
	    # write events that didn't match to a file
	    file { "path" => "/var/log/logstash/grok_failures.txt" }
	}
	
	if [type] == "bigiplogs" {
    		stdout { codec => rubydebug }
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "bigip.logs-%{+YYYY.MM.dd.HH}"
		}
		file {
			path => "/var/log/logstash/bigiplogs.log"
			codec => "line"
		}
  	}

  	if [type] == "httplogs" {
		stdout { codec => rubydebug }
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "http.logs-%{+YYYY.MM.dd.HH}"
			template_overwrite => true
		}
		file {
			path => "/var/log/logstash/httplogs.log"
			codec => "line"
		}
  	}


  	if [type] == "ddoslogs" {
		stdout { codec => rubydebug }
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "ddos.logs-%{+YYYY.MM.dd.HH}"
			template_overwrite => true
		}
		file {
			path => "/var/log/logstash/ddoslogs.log"
			codec => "line"
		} 
  	}
	
  	if [type] == "dnslogs" {
		stdout { codec => rubydebug }
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "dns.logs-%{+YYYY.MM.dd.HH}"
			template_overwrite => true
		}
		file {
			path => "/var/log/logstash/dnslogs.log"
			codec => "line"
		} 
  	}
	 
#	if [type] == "asmlogs" {
#		stdout { codec => rubydebug }
#		elasticsearch {
#			hosts => ["localhost:9200"]
#			index => "asm.logs-%{+YYYY.MM.dd.HH}"
#		}
# 	}

#        if [type] == "collectd" {
#		stdout { codec => rubydebug }
#		elasticsearch {
#                       hosts => ["localhost:9200"]
#                        manage_template => false
#                        index => "collectd-%{+YYYY.MM.dd}"
#                        document_type => "collectd-log"
#                }
#		file {
#			path => "/var/log/logstash/collectd.log"
#			codec => "line"
#		} 		
#       }

}
